(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{472:function(t,o,_){"use strict";_.r(o);var r=_(63),s=Object(r.a)({},(function(){var t=this,o=t.$createElement,_=t._self._c||o;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("JavaScript原型链和new操作符的讲解")]),t._v(" "),_("h1",{attrs:{id:"javascript原型链"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript原型链"}},[t._v("#")]),t._v(" JavaScript原型链")]),t._v(" "),_("p",[t._v("   在学习原型链之前，我们先来了解一个问题new操作符都干了什么？")]),t._v(" "),_("div",{staticClass:"language-javascript line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-javascript"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj  "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建了一个空对象obj")]),t._v("\nobj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将空对象的__proto__成员指向了Base函数对象prototype成员对象")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Base")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//我们将Base函数中this上的成员赋值给obj")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("p",[t._v("   其实new 操作符就干了三件事，分别为新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象。")]),t._v(" "),_("h3",{attrs:{id:"一、什么是原型链："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是原型链："}},[t._v("#")]),t._v(" 一、什么是原型链：")]),t._v(" "),_("p",[t._v("   每个对象都可以有一个原型_proto_，这个原型还可以有它自己的原型，以此类推，形成一个原型链。查找特定属性的时候，我们先去这个对象里去找，如果没有的话就去它的原型对象里面去，如果还是没有的话再去向原型对象的原型对象里去寻找...... 这个操作被委托在整个原型链上，这个就是我们所说的原型链。我们先来看一张图来了解一下原型链。\n"),_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200718161145235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkzOTE1OA==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),t._v(" "),_("h3",{attrs:{id:"二、原型链中的指针"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、原型链中的指针"}},[t._v("#")]),t._v(" 二、原型链中的指针")]),t._v(" "),_("p",[t._v("  我们知道了原型的概念，接下来我们分析一下原型的指针；构造函数里面有两个属性： "),_("strong",[_("code",[t._v("_proto_")])]),t._v(" 和 "),_("strong",[_("code",[t._v("*prototype")])]),t._v("* ,  先说说prototype:")]),t._v(" "),_("h4",{attrs:{id:"prototype"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" "),_("strong",[t._v("prototype:")])]),t._v(" "),_("p",[t._v("  prototype属性，它是函数所"),_("strong",[t._v("独有")]),t._v("的，"),_("strong",[t._v("所有函数都有一个"),_("code",[t._v("prototype")]),t._v("指针")]),t._v("，它是"),_("strong",[t._v("从一个函数指向一个对象")]),t._v("。它的含义是函数的原型对象，也就是这个函数所创建的实例的原型对象; 这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法 ;  其实简而言之：prototype指针的意义是，当我们使用这个构造函数new出新对象的时候，知道"),_("strong",[t._v("新对象的原型是谁")]),t._v("。")]),t._v(" "),_("h4",{attrs:{id:"proto"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),_("strong",[_("code",[t._v("__proto__")])]),t._v(":")]),t._v(" "),_("p",[_("code",[t._v("__proto__")]),t._v("每个对象都有，JavaScript在new一个对象的时候，会将它的"),_("code",[t._v("__proto__")]),t._v("指向构造函数的"),_("code",[t._v("prototype")]),t._v("指向的那个对象。，换句话说就是指向构造函数的原型对象，它是对象独有的。注意，构造函数也有这个属性呢，因为在JavaScript的宇宙里万物皆对象，包括函数；")]),t._v(" "),_("p",[t._v("   根据概念我们能知道，上图的Foo构造函数"),_("code",[t._v("_proto_")]),t._v("指向的是他的构造函数的原型对象，它的构造函数是Function, 也就是说Foo的"),_("code",[t._v("_proto_")]),t._v("指向"),_("code",[t._v("Function.prototype")]),t._v(",  我们再看到F函数的"),_("code",[t._v("_proto_")]),t._v("指像的是"),_("code",[t._v("Foo.prototype")]),t._v(",因为他们是通过 new Foo实例化出来的，它们的构造函数就是"),_("code",[t._v("Foo()")]),t._v(", 即"),_("code",[t._v("F._proto_ = Foo.prototype")]),t._v("；  接下来"),_("code",[t._v("Function.prororype")]),t._v(",它的"),_("code",[t._v("_proto_")]),t._v("指针指向的是"),_("code",[t._v("Object.prototype,Object._proto_")]),t._v("又为null.。\n    于是我们就可知：在原型链中的指向是，函数 → 构造行数  → "),_("code",[t._v("Function.prototype")]),t._v(" → "),_("code",[t._v("Object.protype")]),t._v(" → "),_("code",[t._v("null")]),t._v(" ;")]),t._v(" "),_("h4",{attrs:{id:"constructor"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" "),_("strong",[t._v("constructor:")])]),t._v(" "),_("p",[t._v("  每个函数都有一个原型对象，该原型对象有一个constructor指针，指向创建对象的函数本身。\n   此外，我们还可以使用"),_("code",[t._v("constructor")]),t._v("属性，所有的实例对象都可以访问"),_("code",[t._v("constructor")]),t._v("属性，\n由于"),_("code",[t._v("constructor")]),t._v("属性仅仅是原始构造函数的引用，因此我们可以使用该属性创建新的对象。")]),t._v(" "),_("h3",{attrs:{id:"三、总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、总结"}},[t._v("#")]),t._v(" 三、总结")]),t._v(" "),_("ol",[_("li",[_("p",[_("code",[t._v("__proto__")]),t._v(" 是原型链查询中实际用到的，它总是指向 "),_("code",[t._v("prototype")]),t._v("；"),_("code",[t._v("__proto__")]),t._v("是查找某函数或对象的原型链方式")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("prototype")]),t._v(" 是函数所独有的，在定义构造函数时自动创建，它总是被 "),_("code",[t._v("__proto__")]),t._v(" 所指。"),_("code",[t._v("prototype")]),t._v("属性可以给函数和对象添加可继承的方法、属性。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("constructor")]),t._v("这个属性包含了一个指针，指回原构造函数。")])]),t._v(" "),_("li",[_("p",[t._v("所有对象都有"),_("code",[t._v("__proto__")]),t._v("属性，函数这个特殊对象除了具有"),_("code",[t._v("__proto__")]),t._v("属性，还有特有的原型属性"),_("code",[t._v("prototype")]),t._v("。"),_("code",[t._v("prototype")]),t._v("对象默认有两个属性，"),_("code",[t._v("constructor")]),t._v("属性和"),_("code",[t._v("__proto__")]),t._v("属性。")])])])])}),[],!1,null,null,null);o.default=s.exports}}]);